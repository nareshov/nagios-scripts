#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use Cwd qw/abs_path/;

# TO DO:
# inspect swap

my $valid_fs = get_valid_fstypes();
my $mount_fs = get_mounted_fs();
my $fstab_fs = get_fstab_fs();

#print Dumper($valid_fs);
#print Dumper($mount_fs);
#print Dumper($fstab_fs);

my $errors;
for my $file (keys %$fstab_fs) {
  unless ($fstab_fs->{$file}->{'device'} eq $mount_fs->{$file}->{'device'}) {
    $errors .= "/etc/fstab reports $file should be mounted on $fstab_fs->{$file}->{'device'}\; ";
    $errors .= "/proc/mounts reports $file is mounted on $mount_fs->{$file}->{'device'}\; ";
  }
  unless ($fstab_fs->{$file}->{'fstype'} eq $mount_fs->{$file}->{'fstype'}) {
    $errors .= "/etc/fstab reports $file should be fs type $fstab_fs->{$file}->{'fstype'}\; ";
    $errors .= "/proc/mounts reports $file is fs type $mount_fs->{$file}->{'fstype'}\; ";
  }
  unless ($fstab_fs->{$file}->{'writeable'} eq $mount_fs->{$file}->{'writeable'}) {
    $errors .= "/etc/fstab reports $file should be writeable = $fstab_fs->{$file}->{'writeable'} (1=rw,0=ro)\; ";
    $errors .= "/proc/mounts reports $file is mounted writeable = $mount_fs->{$file}->{'writeable'} (1=rw,0=ro)\; ";
  }
}

if ($errors) {
  print "MOUNTS CRITICAL: $errors\n";
  exit 2;
} else {
  print "MOUNTS OK\n";
  exit 0;
}

exit;

sub get_valid_fstypes {
  open(IN, '/proc/filesystems') || die "Unable to read: $!";
  my %results;
  while (<IN>) {
    next if /^nodev/;
    /^\s+(\w+)$/;
    $results{$1} = 1;
  }
  close(IN);
  return \%results;
}

sub get_mounted_fs {
  open(IN, '/proc/mounts') || die "Unable to read: $!";
  my %results;
  while (<IN>) {
    my ($spec, $file, $vfstype, $mntops, $freq, $passno) = split(/ /, $_);
    next unless ($valid_fs->{$vfstype});
    $results{$file} = {
      device => ($spec =~ m(/dev/root) ? resolve_rootfs_device() : $spec ),
      options => $mntops,
      fstype => $vfstype,
      writeable => ($mntops =~ /^rw/ ? 1 : 0),
    };
  }
  close(IN);
  return \%results;
}

sub resolve_rootfs_device {
  my $device;
  my @rootfs_stat = stat('/dev/root');
  opendir(DIR, '/dev') || die "Unable to opendir: $!";
  while ($device = readdir(DIR)) {
    my @device_stat = stat('/dev/' . $device);
    next unless $rootfs_stat[6] eq $device_stat[6];
    return '/dev/' . $device unless $device eq 'root';
  }
  closedir(DIR);
}

sub resolve_device_label {
  my $labeled_devname = shift;
  if ($labeled_devname eq '/') {
    return resolve_rootfs_device();
  } else {
    return abs_path('/dev/disk/by-label/' . $labeled_devname);
  }
}

sub get_fstab_fs {
  open(IN, '/etc/fstab') || die "Unable to read: $!";
  my %results;
  while (<IN>) {
    my ($spec, $file, $vfstype, $mntops, $freq, $passno) = split(/\s+/, $_);
    next unless ($valid_fs->{$vfstype});
    $results{$file} = {
      device => ($spec =~ /^LABEL=(\S+)$/ ? resolve_device_label($1) : $spec),
      options => $mntops,
      fstype => $vfstype,
      writeable => ($mntops =~ /^(defaults|rw)/ ? 1 : 0),
    };
  }
  close(IN);
  return \%results;
}

